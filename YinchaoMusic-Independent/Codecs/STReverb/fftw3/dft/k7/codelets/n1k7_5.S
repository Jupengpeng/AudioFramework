/*
 * Copyright (c) 2003, 2006 Matteo Frigo
 * Copyright (c) 2003, 2006 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/* This file was automatically generated --- DO NOT EDIT */
/* Generated on Sat Jul  1 22:40:34 EDT 2006 */

#include "config.h"



/* cheap-mode: VECTGRADE_FULL succeeded. (54 steps) */
/* Generated by: ../../../genfft-k7/gen_notw -no-randomized-cse -n 5 -name n1k7_5 */

/*
 * Generator Id's : 
 * $Id: algsimp.ml,v 1.4 2006-01-05 03:04:27 stevenj Exp $
 * $Id: fft.ml,v 1.4 2006-01-05 03:04:27 stevenj Exp $
 * $Id: gen_notw.ml,v 1.12 2006-01-05 03:04:27 stevenj Exp $
 */

/* The following asm code is Copyright (c) 2000-2001 Stefan Kral */
.section .rodata
	.balign 64
KP951056516KP951056516: .float +0.951056516295153572116439333379382143405698634, +0.951056516295153572116439333379382143405698634
KP587785252KP587785252: .float +0.587785252292473129168705954639072768597652438, +0.587785252292473129168705954639072768597652438
KP559016994KP559016994: .float +0.559016994374947424102293417182819058860154590, +0.559016994374947424102293417182819058860154590
KP250000000KP250000000: .float +0.250000000000000000000000000000000000000000000, +0.250000000000000000000000000000000000000000000
chs_lo: .long 0x80000000, 0x00000000
.text
.text
	.balign 64
n1k7_5:
	subl $20, %esp
	femms 
	movl %ebx, 16(%esp)
	movl 40(%esp), %edx
	movl 44(%esp), %ebx
	movl 24(%esp), %eax
	movl %esi, 12(%esp)
	movl 32(%esp), %ecx
	movl %edi, 8(%esp)
	sall $2, 52(%esp)
	sall $2, 56(%esp)
	leal (,%edx,4), %edx
	leal (,%ebx,4), %ebx
	.p2align 4,,7
.L0:
	/* promise simd cell size = 8 */ 
	movq (%eax,%edx), %mm1
	movq (%eax,%edx,4), %mm0
	leal (%edx,%edx,2), %esi
	movq (%eax,%edx,2), %mm4
	leal (%ebx,%ebx,2), %edi
	movq (%eax,%esi), %mm3
	movq %mm1, %mm2
	pfsub %mm0, %mm1
	movq %mm4, %mm5
	pfadd %mm0, %mm2
	pfadd %mm3, %mm5
	pfsub %mm3, %mm4
	movq (%eax), %mm3
	pswapd %mm1, %mm1
	/* simd data load/store barrier */ 
	addl 52(%esp), %eax
	movq %mm2, %mm6
	movq %mm1, %mm7
	pfmul KP951056516KP951056516, %mm1
	pfsub %mm5, %mm2
	pfadd %mm5, %mm6
	pswapd %mm4, %mm4
	movq %mm3, %mm5
	pfmul KP587785252KP587785252, %mm7
	movq %mm4, %mm0
	pfmul KP587785252KP587785252, %mm4
	pfmul KP559016994KP559016994, %mm2
	pfadd %mm6, %mm3
	pfmul KP250000000KP250000000, %mm6
	pfmul KP951056516KP951056516, %mm0
	pfadd %mm4, %mm1
	movq %mm3, (%ecx)
	movq %mm2, %mm4
	pfsub %mm6, %mm5
	pfsub %mm7, %mm0
	pxor chs_lo, %mm1
	pfsubr %mm5, %mm4
	pfadd %mm5, %mm2
	pxor chs_lo, %mm0
	movq %mm4, %mm7
	movq %mm2, %mm3
	pfsub %mm0, %mm4
	pfsub %mm1, %mm2
	pfadd %mm0, %mm7
	pfadd %mm1, %mm3
	movq %mm4, (%ecx,%edi)
	movq %mm2, (%ecx,%ebx)
	movq %mm7, (%ecx,%ebx,2)
	movq %mm3, (%ecx,%ebx,4)
	addl 56(%esp), %ecx
	decl 48(%esp)
	jnz .L0
	femms 
	movl 16(%esp), %ebx
	movl 12(%esp), %esi
	movl 8(%esp), %edi
	addl $20, %esp
	ret 

.section .rodata
nam:
	.string "n1k7_5"
	.align 4
desc:
	.long 5
	.long nam
	.double 16
	.double 6
	.double 0
	.double 0
	.long fftwf_kdft_k7_mgenus
	.long 0
	.long 0
	.long 0
	.long 0

.text
	.align 4
.globl fftwf_codelet_n1k7_5
fftwf_codelet_n1k7_5:
	subl $12,%esp
	addl $-4,%esp
	pushl $desc
	pushl $n1k7_5
	pushl 28(%esp)
	call fftwf_kdft_register
	addl $16,%esp
	addl $12,%esp
	ret

